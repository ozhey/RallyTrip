{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../src/utils/isHTMLElement.ts","../../src/constants.ts","../../src/logic/attachEventListeners.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isArray.ts","../../src/utils/isObject.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/transformToNestObject.ts","../../src/utils/isUndefined.ts","../../src/utils/filterOutFalsy.ts","../../src/utils/get.ts","../../src/logic/focusOnErrorField.ts","../../src/logic/removeAllEventListeners.ts","../../src/logic/getRadioValue.ts","../../src/utils/isRadioInput.ts","../../src/utils/isFileInput.ts","../../src/utils/isCheckBoxInput.ts","../../src/utils/isMultipleSelect.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/utils/isDetached.ts","../../src/utils/isEmptyObject.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/findRemovedFieldAndRemoveListener.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/isString.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepMerge.ts","../../src/logic/getFieldsValues.ts","../../src/utils/deepEqual.ts","../../src/logic/shouldRenderBasedOnError.ts","../../src/utils/isRegex.ts","../../src/logic/getValueAndMessage.ts","../../src/utils/isFunction.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/appendErrors.ts","../../src/logic/validateField.ts","../../src/utils/getPath.ts","../../src/logic/assignWatchFields.ts","../../src/logic/skipValidation.ts","../../src/logic/getFieldArrayParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/isSelectInput.ts","../../src/utils/onDomRemove.ts","../../src/utils/validationModeChecker.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/useForm.ts","../../src/useFormContext.tsx","../node_modules/regenerator-runtime/runtime.js"],"names":["_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","_defineProperty","obj","value","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","arguments","forEach","getOwnPropertyDescriptors","defineProperties","module","exports","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","err","undefined","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","F","s","n","e","_e","f","TypeError","normalCompletion","didErr","step","next","_e2","_toConsumableArray","arr","arrayLikeToArray","iter","from","HTMLElement","EVENTS","VALIDATION_MODE","SELECT","UNDEFINED","INPUT_VALIDATION_RULES","attachEventListeners","shouldAttachChangeEvent","handleChange","ref","isHTMLElement","addEventListener","isObjectType","isNullOrUndefined","Date","test","input","result","replace","match","mathNumber","mathQuote","originalString","set","path","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isObject","isNaN","data","entries","reduce","previous","val","Boolean","defaultValue","filterOutFalsy","split","isUndefined","fields","fieldErrors","get","field","focus","options","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","current","disabled","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","findRemovedFieldAndRemoveListener","shouldUnregister","forceDelete","fieldRef","isCheckBoxInput","removeAllEventListeners","setFieldArrayDirtyFields","defaultValues","dirtyFields","parentName","deepMerge","isPrimitive","targetValue","sourceValue","search","output","isString","startsWith","find","deepEqual","object1","object2","isErrorObject","keys1","keys2","includes","val1","val2","shouldRenderBasedOnError","errors","validFields","fieldsWithValidation","previousError","RegExp","validationData","isRegex","message","getValidateError","validateAllFieldCriteria","types","a","required","maxLength","minLength","min","max","pattern","validate","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","requiredValue","requiredMessage","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","exceedMin","valueDate","valueAsDate","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","validateError","validationResult","validateFunction","validateResult","getPath","pathWithIndex","getInnerPath","flat","Infinity","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","isMatchFieldArrayName","searchName","names","some","onDomRemove","removeFieldEventListenerAndRef","observer","MutationObserver","observe","window","document","childList","subtree","mode","isOnSubmit","isWindowUndefined","isWeb","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","React.useRef","fieldArrayDefaultValuesRef","watchFieldsRef","Set","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","defaultValuesAtRenderRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","modeChecker","isValidateAllFieldCriteria","React.useState","isDirty","submitCount","touched","isSubmitting","isSubmitSuccessful","formState","setFormState","readFormStateRef","formStateRef","observerRef","updateFormState","React.useCallback","state","shouldRenderBaseOnError","shouldRender","shouldReRender","setFieldValue","rawValue","radioRef","selectRef","checkboxRef","isFormDirty","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","all","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","isFieldWatched","renderWatchedInputs","found","getFieldArrayParentName","size","setValue","payload","getFieldsValues","shouldSkipValidation","skipValidation","validateResolver","removeFieldEventListener","clearErrors","inputName","setError","shouldFocus","watchInternal","fieldNames","watchId","combinedDefaultValues","assignWatchFields","watch","unregister","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","isSelectInput","register","refOrValidationOptions","rules","handleSubmit","onValid","onInvalid","preventDefault","persist","fieldError","focusOnErrorField","resetRefs","reset","omitResetState","inputRef","closest","resetFieldArray","React.useEffect","disconnect","commonProps","control","prop","FormContext","React.createContext","displayName","runtime","Op","hasOwn","hasOwnProperty","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","create","Context","_invoke","GenStateSuspendedStart","method","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","GenStateSuspendedYield","makeInvokeMethod","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","defineIteratorMethods","AsyncIterator","PromiseImpl","invoke","__await","unwrapped","previousPromise","callInvokeWithMethodAndArg","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","iterable","iteratorMethod","constructor","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","reverse","pop","skipTempReset","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function"],"mappings":"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","file":"static/js/6.e62dc881.chunk.js","sourcesContent":["import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","export default (value: unknown): value is null | undefined => value == null;\n","export default <T>(value: unknown): value is T[] => Array.isArray(value);\n","import isNullOrUndefined from './isNullOrUndefined';\nimport isArray from './isArray';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","import isArray from './isArray';\n\nexport default (value: [] | string) =>\n  !isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (input: string): string[] => {\n  const result: string[] = [];\n\n  input.replace(\n    /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n    (\n      match: string,\n      mathNumber: string,\n      mathQuote: string,\n      originalString: string,\n    ): any => {\n      result.push(\n        mathQuote\n          ? originalString.replace(/\\\\(\\\\)?/g, '$1')\n          : mathNumber || match,\n      );\n    },\n  );\n\n  return result;\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues): any =>\n  Object.entries(data).reduce(\n    (previous: FieldValues, [key, value]): FieldValues => {\n      if (!isKey(key)) {\n        set(previous, key, value);\n        return previous;\n      }\n\n      return { ...previous, [key]: value };\n    },\n    {},\n  );\n","export default (val: unknown): val is undefined => val === undefined;\n","export default (value: any[]) => value.filter(Boolean);\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport filterOutFalsy from './filterOutFalsy';\n\nexport default (obj: any, path: string, defaultValue?: unknown) => {\n  const result = filterOutFalsy(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import isArray from '../utils/isArray';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport isArray from '../utils/isArray';\nimport unset from '../utils/unset';\nimport filterOutFalsy from '../utils/filterOutFalsy';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      set(shallowFieldsStateRef.current, name, value);\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (isArray(options) && options.length) {\n      filterOutFalsy(options).forEach((option, index): void => {\n        const { ref } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !filterOutFalsy(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import { get } from '../utils';\nimport isArray from '../utils/isArray';\nimport set from '../utils/set';\n\nexport default function setFieldArrayDirtyFields<\n  T extends U,\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setFieldArrayDirtyFields(\n          values[index][key],\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        get(defaultValues[index] || {}, key) === values[index][key]\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n    !dirtyFields.length &&\n      parentNode &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields.length ? dirtyFields : undefined;\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      if (\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (isArray(targetValue) && isArray(sourceValue))\n      ) {\n        target[key] = deepMerge(targetValue, sourceValue);\n      } else {\n        target[key] = sourceValue;\n      }\n    } catch {}\n  }\n\n  return target;\n}\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport isArray from '../utils/isArray';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return deepMerge(\n    { ...((shallowFieldsStateRef || {}).current || {}) },\n    transformToNestObject(output),\n  );\n};\n","import isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\n\nexport default function deepEqual(\n  object1: any = [],\n  object2: any = [],\n  isErrorObject?: boolean,\n) {\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    if (!(isErrorObject && ['ref', 'context'].includes(key))) {\n      const val1 = object1[key];\n      const val2 = object2[key];\n\n      if (\n        (isObject(val1) || isArray(val1)) && (isObject(val2) || isArray(val2))\n          ? !deepEqual(val1, val2, isErrorObject)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default function shouldRenderBasedOnError<\n  TFieldValues extends FieldValues\n>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n}\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox\n          ? (((fields[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, shallowFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\n\nexport const getPath = <T extends string, U extends object | unknown[]>(\n  path: T,\n  values: U,\n): string[] => {\n  const getInnerPath = <K>(key: K, value: U, isObject?: boolean) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(key, value, isObject(values)))\n    .flat(Infinity) as string[];\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport shouldRenderBasedOnError from './logic/shouldRenderBasedOnError';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isArray from './utils/isArray';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport filterOutFalsy from './utils/filterOutFalsy';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  NonUndefined,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {},\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, unknown[]>\n  >({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<\n    Record<string, InternalNameSet<TFieldValues>>\n  >({});\n  const useWatchRenderFunctionsRef = React.useRef<Record<string, () => void>>(\n    {},\n  );\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const defaultValuesAtRenderRef = React.useRef<\n    Partial<DefaultValues<TFieldValues>>\n  >({});\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef(\n    shouldUnregister ? {} : { ...defaultValues },\n  );\n  const resetFieldArrayFunctionRef = React.useRef<\n    Record<\n      InternalFieldName<FieldValues>,\n      (data?: UnpackNestedValue<DeepPartial<TFieldValues>>) => void\n    >\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) =>\n      !isUnMount.current &&\n      setFormState({\n        ...formStateRef.current,\n        ...state,\n      }),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        shouldRenderBasedOnError<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state)\n      ) {\n        updateFormState({\n          ...state,\n          errors: formStateRef.current.errors,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: string,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | string[]\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = () =>\n    !deepEqual(\n      getValues(),\n      isEmptyObject(defaultValuesRef.current)\n        ? defaultValuesAtRenderRef.current\n        : defaultValuesRef.current,\n    ) || !isEmptyObject(formStateRef.current.dirtyFields);\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): {\n      dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    } => {\n      if (\n        !fieldsRef.current[name] ||\n        (!readFormStateRef.current.isDirty &&\n          !readFormStateRef.current.dirtyFields)\n      ) {\n        return {};\n      }\n\n      const isFieldDirty =\n        get(defaultValuesAtRenderRef.current, name) !==\n        getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n      const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n      const previousIsDirty = formStateRef.current.isDirty;\n\n      isFieldDirty\n        ? set(formStateRef.current.dirtyFields, name, true)\n        : unset(formStateRef.current.dirtyFields, name);\n\n      const state = {\n        isDirty: isFormDirty(),\n        dirtyFields: formStateRef.current.dirtyFields,\n      };\n\n      const isChanged =\n        (readFormStateRef.current.isDirty &&\n          previousIsDirty !== state.isDirty) ||\n        (readFormStateRef.current.dirtyFields &&\n          isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n      if (isChanged && shouldRender) {\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...state,\n        };\n        updateFormState({\n          ...state,\n        });\n      }\n\n      return isChanged ? state : {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = (\n          await validateField<TFieldValues>(\n            fieldsRef,\n            isValidateAllFieldCriteria,\n            fieldsRef.current[name] as Field,\n            shallowFieldsStateRef,\n          )\n        )[name];\n\n        shouldRenderBaseOnError(name, error, skipReRender);\n\n        return isUndefined(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          errors: formStateRef.current.errors,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (isArray(fields)) {\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields, readFormStateRef.current.isValid);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    <T extends string, U extends object | unknown[]>(\n      name: T,\n      value: U,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      getPath(name, value).forEach((fieldName) => {\n        const data = {};\n        const field = fieldsRef.current[fieldName];\n\n        if (field) {\n          set(data, name, value);\n          setFieldValue(fieldName, get(data, fieldName));\n\n          if (shouldDirty) {\n            updateAndGetDirtyState(fieldName);\n          }\n\n          if (shouldValidate) {\n            trigger(fieldName as FieldName<TFieldValues>);\n          }\n        }\n      });\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig = {},\n    ) => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          fieldArrayDefaultValuesRef.current[name] = value;\n          resetFieldArrayFunctionRef.current[name]({\n            [name]: value,\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            readFormStateRef.current.isDirty ||\n            readFormStateRef.current.dirtyFields\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n              dirtyFields: formStateRef.current.dirtyFields,\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getFieldArrayParentName(name)) ||\n          !useWatchFieldsRef.current[key].size\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value:\n      | (NonUndefined<TFieldValue> extends NestedValue<infer U>\n          ? U\n          : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>)\n      | null\n      | undefined,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value as TFieldValues[string], config);\n\n    if (isFieldWatched(name)) {\n      updateFormState();\n    }\n\n    renderWatchedInputs(name);\n\n    if ((config || {}).shouldValidate) {\n      trigger(name as any);\n    }\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        const name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender = !isEmptyObject(state) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n\n            error = get(errors, name);\n\n            isValid = isEmptyObject(errors);\n\n            if (previousFormIsValid !== isValid) {\n              shouldRender = true;\n            }\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return getFieldsValues(fieldsRef, shallowFieldsStateRef);\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n      const isValid = isEmptyObject(errors);\n\n      if (previousFormIsValid !== isValid) {\n        updateFormState({\n          isValid,\n        });\n      }\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field: Field | undefined, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !filterOutFalsy(field.options || []).length) {\n          unset(defaultValuesAtRenderRef.current, field.ref.name);\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            errors: formStateRef.current.errors,\n            isDirty: isFormDirty(),\n            dirtyFields: formStateRef.current.dirtyFields,\n          });\n\n          resolverRef.current && validateResolver();\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName]\n          ? isKey(inputName)\n            ? delete formStateRef.current.errors[inputName]\n            : set(formStateRef.current.errors, inputName, undefined)\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n      errors: formStateRef.current.errors,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      const fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        shallowFieldsStateRef,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      if (isUndefined(watchId)) {\n        isWatchAllRef.current = true;\n      }\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    (isArray(name) ? name : [name]).forEach((fieldName) =>\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true),\n    );\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? isArray(field.options) &&\n          filterOutFalsy(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...filterOutFalsy((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    if (resolver && !isFieldArray && readFormStateRef.current.isValid) {\n      validateResolver();\n    } else if (!isEmptyObject(validateOptions)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          if (previousFormIsValid !== isEmptyObject(error)) {\n            updateFormState();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n      set(\n        defaultValuesAtRenderRef.current,\n        name,\n        isEmptyDefaultValue\n          ? isObject(fieldValue)\n            ? { ...fieldValue }\n            : fieldValue\n          : defaultValue,\n      );\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = getFieldsValues(fieldsRef, shallowFieldsStateRef, true);\n\n      if (readFormStateRef.current.isSubmitting) {\n        updateFormState({\n          isSubmitting: true,\n        });\n      }\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = errors;\n          fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(\n            fieldValues as UnpackNestedValue<TSubmitFieldValues>,\n            e,\n          );\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          if (onInvalid) {\n            await onInvalid(fieldErrors, e);\n          }\n          if (shouldFocusError) {\n            focusOnErrorField(fieldsRef.current, fieldErrors);\n          }\n        }\n      } finally {\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          errors: formStateRef.current.errors,\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    defaultValuesAtRenderRef.current = {};\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isValid: isValid ? formStateRef.current.isValid : true,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n    });\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n\n    defaultValuesRef.current = { ...(values || defaultValuesRef.current) };\n\n    if (values) {\n      renderWatchedInputs('');\n    }\n\n    shallowFieldsStateRef.current = shouldUnregister ? {} : { ...values } || {};\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    resetRefs(omitResetState);\n  };\n\n  observerRef.current =\n    observerRef.current || !isWeb\n      ? observerRef.current\n      : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n\n    return () => {\n      isUnMount.current = true;\n      observerRef.current && observerRef.current.disconnect();\n      shallowFieldsStateRef.current = {};\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      fieldsRef.current &&\n        Object.values(fieldsRef.current).forEach((field) =>\n          removeFieldEventListenerAndRef(field, true),\n        );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n  };\n\n  const control = {\n    removeFieldEventListener,\n    renderWatchedInputs,\n    watchInternal,\n    mode: modeRef.current,\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnChange,\n    },\n    fieldsRef,\n    isWatchAllRef,\n    watchFieldsRef,\n    resetFieldArrayFunctionRef,\n    useWatchFieldsRef,\n    useWatchRenderFunctionsRef,\n    fieldArrayDefaultValuesRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    readFormStateRef,\n    formStateRef,\n    defaultValuesRef,\n    shallowFieldsStateRef,\n    updateFormState,\n    shouldUnregister,\n    validateResolver: resolver ? validateResolver : undefined,\n    ...commonProps,\n  };\n\n  return {\n    watch,\n    control,\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (\n              process.env.NODE_ENV !== 'production' &&\n              prop === 'isValid' &&\n              isOnSubmit\n            ) {\n              console.warn(\n                '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n              );\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n"],"sourceRoot":""}